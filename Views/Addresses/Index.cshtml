@model IEnumerable<AddressBookPro.Models.Address>
@{
    ViewData["Title"] = "Index";
}

<table class="table table-striped table-bordered" style="display: none;">
    <thead>
        <tr>
            <th>
                Contact
            </th>
            <th>
                Address
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Label)
            </th>
            <th>Added</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>

            <td>
                <div class="d-flex align-items-center">
                    <div class="avatar-wrapper">
                        @if (item.Avatar != null)
                        {
                            <img src="@item.GetAvatar()" />
                        }
                        else
                        {
                            <svg width="4rem" height="4rem" viewBox="0 0 16 16" class="bi bi-person-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M13.468 12.37C12.758 11.226 11.195 10 8 10s-4.757 1.225-5.468 2.37A6.987 6.987 0 0 0 8 15a6.987 6.987 0 0 0 5.468-2.63z" />
                                <path fill-rule="evenodd" d="M8 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                                <path fill-rule="evenodd" d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z" />
                            </svg>
                        }
                    </div>
                    <div class="d-flex flex-column justify-content-center ml-3">
                        @Html.DisplayFor(modelItem => item.FullName)
                        @Html.DisplayFor(modelItem => item.Email)
                    </div>
                </div>
            </td>
            <td>@item.GetFullAddress()</td>

            <td>@Html.DisplayFor(modelItem => item.PhoneNumber)</td>

            <td>@switch (item.Label.Name.ToString().ToLower())
                {
                    case "friend":
                        <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-person-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                        </svg>
                        <span>Friend</span>
                        break;
                    case "acquaintance":
                        <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-people-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H7zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-5.784 6A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1h4.216zM4.5 8a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5z" />
                        </svg>
                        <span>Acquaintance</span>
                        break;
                    case "coworker":
                        <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-briefcase-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M0 12.5A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5V6.85L8.129 8.947a.5.5 0 0 1-.258 0L0 6.85v5.65z" />
                            <path fill-rule="evenodd" d="M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5v1.384l-7.614 2.03a1.5 1.5 0 0 1-.772 0L0 5.884V4.5zm5-2A1.5 1.5 0 0 1 6.5 1h3A1.5 1.5 0 0 1 11 2.5V3h-1v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V3H5v-.5z" />
                        </svg>
                        <span>Coworker</span>
                        break;
                    default:
                        break;
                }</td>
            <td>
                @item.DateAdded.ToString("MMM dd, yyyy")
            </td>
            <td>
                <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#editModal-@item.Id">
                    Edit
                </button>
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteModal-@item.Id">
                    Delete
                </button>
            </td>
        </tr>

            @*@await Html.PartialAsync("~/Views/Shared/_DetailsPartial.cshtml", item)*@
            @await Html.PartialAsync("~/Views/Shared/_EditPartial.cshtml", item)
            @await Html.PartialAsync("~/Views/Shared/_DeletePartial.cshtml", item)
        }
    </tbody>
</table>

<!-- Button trigger modal -->
<button type="button" class="btn btn-success d-flex justify-content-center" data-toggle="modal" data-target="#exampleModalCenter">
    <svg width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-person-plus-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm7.5-3a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z" />
    </svg>
    <span class="ml-1">Add Contact</span>
</button>

@await Html.PartialAsync("~/Views/Shared/_CreatePartial.cshtml", new Address())
